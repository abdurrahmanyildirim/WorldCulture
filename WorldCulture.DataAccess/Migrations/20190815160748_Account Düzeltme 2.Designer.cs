// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldCulture.DataAccess.Concrete.EntityFramework.Context;

namespace WorldCulture.DataAccess.Migrations
{
    [DbContext(typeof(EfContext))]
    [Migration("20190815160748_Account Düzeltme 2")]
    partial class AccountDüzeltme2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WorldCulture.Entities.Concrete.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("MemberDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("PersonelInfo")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<string>("ProfilePhotoPath");

                    b.Property<int>("RoleID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AccountID");

                    b.HasIndex("RoleID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WorldCulture.Entities.Concrete.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CityPhotoPath")
                        .IsRequired();

                    b.Property<int>("CountryID");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Population")
                        .IsRequired();

                    b.HasKey("CityID");

                    b.HasIndex("CountryID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WorldCulture.Entities.Concrete.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Capital")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<string>("EthnicIdentity")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("FlagPhotoPath")
                        .IsRequired();

                    b.Property<DateTime>("FoundedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Population")
                        .IsRequired()
                        .HasMaxLength(13);

                    b.Property<string>("President")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("SummaryInfo")
                        .IsRequired();

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WorldCulture.Entities.Concrete.FamousPlace", b =>
                {
                    b.Property<int>("FamousPlaceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityID");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("PhotoPath")
                        .IsRequired();

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("FamousPlaceID");

                    b.HasIndex("CityID");

                    b.ToTable("FamousPlaces");
                });

            modelBuilder.Entity("WorldCulture.Entities.Concrete.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID");

                    b.Property<string>("CountOfView");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("FamousPlaceID");

                    b.Property<string>("PostPhotoPath")
                        .IsRequired();

                    b.Property<byte>("Rate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("PostID");

                    b.HasIndex("AccountID");

                    b.HasIndex("FamousPlaceID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("WorldCulture.Entities.Concrete.Relation", b =>
                {
                    b.Property<int>("RelationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromAccountID");

                    b.Property<int?>("ToAccountID");

                    b.HasKey("RelationID");

                    b.HasIndex("FromAccountID");

                    b.HasIndex("ToAccountID");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("WorldCulture.Entities.Concrete.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("PostID");

                    b.Property<byte>("Rate");

                    b.Property<string>("ReviewContent")
                        .IsRequired();

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReviewID");

                    b.HasIndex("PostID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("WorldCulture.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WorldCulture.Entities.Concrete.Account", b =>
                {
                    b.HasOne("WorldCulture.Entities.Concrete.Role", "Role")
                        .WithMany("Account")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorldCulture.Entities.Concrete.City", b =>
                {
                    b.HasOne("WorldCulture.Entities.Concrete.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorldCulture.Entities.Concrete.FamousPlace", b =>
                {
                    b.HasOne("WorldCulture.Entities.Concrete.City", "City")
                        .WithMany("FamousPlaces")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorldCulture.Entities.Concrete.Post", b =>
                {
                    b.HasOne("WorldCulture.Entities.Concrete.Account")
                        .WithMany("Posts")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldCulture.Entities.Concrete.FamousPlace", "FamousPlace")
                        .WithMany("Posts")
                        .HasForeignKey("FamousPlaceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorldCulture.Entities.Concrete.Relation", b =>
                {
                    b.HasOne("WorldCulture.Entities.Concrete.Account", "FromAccount")
                        .WithMany("FromAccounts")
                        .HasForeignKey("FromAccountID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldCulture.Entities.Concrete.Account", "ToAccount")
                        .WithMany("ToAccounts")
                        .HasForeignKey("ToAccountID");
                });

            modelBuilder.Entity("WorldCulture.Entities.Concrete.Review", b =>
                {
                    b.HasOne("WorldCulture.Entities.Concrete.Post", "Post")
                        .WithMany("Reviews")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
